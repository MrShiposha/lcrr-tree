# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc f654f56cb464acb796e15e2d20746d08b9a8f6c7a58db946f0ff3d6a39dc979f # shrinks to (dim, search_mbr, dyn_tree) = (2, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, LRTree { obj_space: RwLock { data: ObjSpace { nodes: [Node { parent_id: Root, mbr: MBR { bounds: [] }, payload: [] }], data_nodes: ShrinkableStorage { data: [], free_ids: [] }, dimension: 2, min_records: 2, max_records: 5, root_id: Leaf(0), collisions: {} } } })
cc 264d65bfdd126f0a6818dd7e45b0680fc21ab1a329059a6c2ed61756b1bd6412 # shrinks to (dim, search_mbr, dyn_tree) = (2, MBR { bounds: [Bounds { min: 50, max: 330 }, Bounds { min: 300, max: 475 }] }, LRTree { obj_space: RwLock { data: ObjSpace { nodes: [Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 218, max: 541 }, Bounds { min: 115, max: 549 }] }, payload: [Data(3), Data(12), Data(15)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 73, max: 266 }, Bounds { min: 240, max: 436 }] }, payload: [Data(8), Data(10)] }, Node { parent_id: Root, mbr: MBR { bounds: [Bounds { min: 56, max: 541 }, Bounds { min: 55, max: 549 }] }, payload: [Leaf(0), Leaf(1), Leaf(3), Leaf(4), Leaf(5)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 113, max: 265 }, Bounds { min: 55, max: 160 }] }, payload: [Data(5), Data(6), Data(13)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 56, max: 372 }, Bounds { min: 190, max: 494 }] }, payload: [Data(4), Data(0), Data(2), Data(7)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 300, max: 506 }, Bounds { min: 220, max: 516 }] }, payload: [Data(3), Data(11), Data(9), Data(1)] }], data_nodes: ShrinkableStorage { data: [Node { parent_id: Leaf(4), mbr: MBR { bounds: [Bounds { min: 72, max: 172 }, Bounds { min: 190, max: 302 }] }, payload: 0 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 370, max: 441 }, Bounds { min: 233, max: 390 }] }, payload: 1 }, Node { parent_id: Leaf(4), mbr: MBR { bounds: [Bounds { min: 56, max: 372 }, Bounds { min: 214, max: 494 }] }, payload: 2 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 413, max: 439 }, Bounds { min: 268, max: 516 }] }, payload: 3 }, Node { parent_id: Leaf(4), mbr: MBR { bounds: [Bounds { min: 246, max: 315 }, Bounds { min: 256, max: 263 }] }, payload: 4 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 181, max: 265 }, Bounds { min: 55, max: 56 }] }, payload: 5 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 208, max: 215 }, Bounds { min: 151, max: 160 }] }, payload: 6 }, Node { parent_id: Leaf(4), mbr: MBR { bounds: [Bounds { min: 155, max: 225 }, Bounds { min: 223, max: 473 }] }, payload: 7 }, Node { parent_id: Leaf(1), mbr: MBR { bounds: [Bounds { min: 73, max: 236 }, Bounds { min: 408, max: 427 }] }, payload: 8 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 410, max: 495 }, Bounds { min: 312, max: 432 }] }, payload: 9 }, Node { parent_id: Leaf(1), mbr: MBR { bounds: [Bounds { min: 238, max: 266 }, Bounds { min: 240, max: 436 }] }, payload: 10 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 300, max: 506 }, Bounds { min: 220, max: 419 }] }, payload: 11 }, Node { parent_id: Leaf(0), mbr: MBR { bounds: [Bounds { min: 262, max: 541 }, Bounds { min: 115, max: 549 }] }, payload: 12 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 113, max: 154 }, Bounds { min: 57, max: 101 }] }, payload: 13 }, Node { parent_id: Root, mbr: MBR { bounds: [Bounds { min: 326, max: 515 }, Bounds { min: 172, max: 492 }] }, payload: 14 }, Node { parent_id: Leaf(0), mbr: MBR { bounds: [Bounds { min: 218, max: 492 }, Bounds { min: 275, max: 291 }] }, payload: 15 }], free_ids: [] }, dimension: 2, min_records: 2, max_records: 5, root_id: Internal(2), collisions: {2: [(0, Outgoing), (1, Outgoing), (4, Incoming), (7, Incoming), (8, Incoming), (10, Incoming), (11, Incoming), (12, Incoming), (14, Incoming), (15, Incoming)], 0: [(2, Incoming), (7, Incoming)], 1: [(2, Incoming), (3, Incoming), (9, Incoming), (11, Incoming), (12, Incoming), (14, Incoming), (15, Incoming)], 3: [(1, Outgoing), (9, Incoming), (11, Incoming), (12, Incoming), (14, Incoming), (15, Incoming)], 4: [(2, Outgoing), (10, Incoming), (11, Incoming), (12, Incoming)], 7: [(0, Outgoing), (2, Outgoing), (8, Incoming), (15, Incoming)], 8: [(7, Outgoing), (2, Outgoing)], 9: [(3, Outgoing), (1, Outgoing), (11, Incoming), (12, Incoming), (14, Incoming)], 10: [(4, Outgoing), (2, Outgoing), (12, Incoming), (15, Incoming)], 11: [(3, Outgoing), (1, Outgoing), (9, Outgoing), (4, Outgoing), (2, Outgoing), (12, Incoming), (14, Incoming), (15, Incoming)], 12: [(3, Outgoing), (1, Outgoing), (9, Outgoing), (11, Outgoing), (10, Outgoing), (4, Outgoing), (2, Outgoing), (14, Incoming), (15, Incoming)], 14: [(3, Outgoing), (1, Outgoing), (9, Outgoing), (11, Outgoing), (12, Outgoing), (2, Outgoing)], 15: [(3, Outgoing), (12, Outgoing), (10, Outgoing), (2, Outgoing), (7, Outgoing), (11, Outgoing), (1, Outgoing)]} } } })
cc 0fc334f5a49d47d97076948a83afd5d51b81d3e4cfb13124ec2f8c15b10c3f6c # shrinks to (dim, search_mbr, dyn_tree) = (2, MBR { bounds: [Bounds { min: 50, max: 103 }, Bounds { min: 70, max: 204 }] }, LRTree { obj_space: RwLock { data: ObjSpace { nodes: [Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 410, max: 530 }, Bounds { min: 76, max: 511 }] }, payload: [Data(14), Data(15)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 102, max: 379 }, Bounds { min: 118, max: 454 }] }, payload: [Data(13), Data(16)] }, Node { parent_id: Internal(8), mbr: MBR { bounds: [Bounds { min: 102, max: 530 }, Bounds { min: 76, max: 517 }] }, payload: [Leaf(0), Leaf(4), Leaf(6), Leaf(1)] }, Node { parent_id: Internal(7), mbr: MBR { bounds: [Bounds { min: 68, max: 291 }, Bounds { min: 57, max: 513 }] }, payload: [Data(2), Data(7), Data(10), Data(17)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 219, max: 424 }, Bounds { min: 256, max: 415 }] }, payload: [Data(8), Data(9)] }, Node { parent_id: Internal(7), mbr: MBR { bounds: [Bounds { min: 353, max: 544 }, Bounds { min: 52, max: 439 }] }, payload: [Data(5), Data(6), Data(0), Data(4)] }, Node { parent_id: Internal(2), mbr: MBR { bounds: [Bounds { min: 122, max: 420 }, Bounds { min: 89, max: 517 }] }, payload: [Data(8), Data(11), Data(1), Data(3)] }, Node { parent_id: Internal(8), mbr: MBR { bounds: [Bounds { min: 68, max: 544 }, Bounds { min: 52, max: 513 }] }, payload: [Leaf(3), Leaf(5)] }, Node { parent_id: Root, mbr: MBR { bounds: [Bounds { min: 68, max: 544 }, Bounds { min: 52, max: 517 }] }, payload: [Internal(2), Internal(7)] }], data_nodes: ShrinkableStorage { data: [Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 353, max: 484 }, Bounds { min: 76, max: 220 }] }, payload: 0 }, Node { parent_id: Leaf(6), mbr: MBR { bounds: [Bounds { min: 125, max: 420 }, Bounds { min: 154, max: 517 }] }, payload: 1 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 71, max: 148 }, Bounds { min: 299, max: 328 }] }, payload: 2 }, Node { parent_id: Leaf(6), mbr: MBR { bounds: [Bounds { min: 122, max: 327 }, Bounds { min: 89, max: 301 }] }, payload: 3 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 370, max: 544 }, Bounds { min: 124, max: 359 }] }, payload: 4 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 382, max: 493 }, Bounds { min: 52, max: 439 }] }, payload: 5 }, Node { parent_id: Leaf(5), mbr: MBR { bounds: [Bounds { min: 425, max: 452 }, Bounds { min: 326, max: 354 }] }, payload: 6 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 68, max: 85 }, Bounds { min: 64, max: 513 }] }, payload: 7 }, Node { parent_id: Leaf(6), mbr: MBR { bounds: [Bounds { min: 302, max: 399 }, Bounds { min: 261, max: 355 }] }, payload: 8 }, Node { parent_id: Leaf(4), mbr: MBR { bounds: [Bounds { min: 219, max: 424 }, Bounds { min: 256, max: 415 }] }, payload: 9 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 120, max: 137 }, Bounds { min: 57, max: 93 }] }, payload: 10 }, Node { parent_id: Leaf(6), mbr: MBR { bounds: [Bounds { min: 254, max: 353 }, Bounds { min: 225, max: 481 }] }, payload: 11 }, Node { parent_id: Root, mbr: MBR { bounds: [Bounds { min: 102, max: 452 }, Bounds { min: 97, max: 301 }] }, payload: 12 }, Node { parent_id: Leaf(1), mbr: MBR { bounds: [Bounds { min: 166, max: 379 }, Bounds { min: 345, max: 405 }] }, payload: 13 }, Node { parent_id: Leaf(0), mbr: MBR { bounds: [Bounds { min: 526, max: 530 }, Bounds { min: 323, max: 394 }] }, payload: 14 }, Node { parent_id: Leaf(0), mbr: MBR { bounds: [Bounds { min: 410, max: 477 }, Bounds { min: 76, max: 511 }] }, payload: 15 }, Node { parent_id: Leaf(1), mbr: MBR { bounds: [Bounds { min: 102, max: 260 }, Bounds { min: 118, max: 454 }] }, payload: 16 }, Node { parent_id: Leaf(3), mbr: MBR { bounds: [Bounds { min: 75, max: 291 }, Bounds { min: 76, max: 171 }] }, payload: 17 }], free_ids: [] }, dimension: 2, min_records: 2, max_records: 5, root_id: Internal(8), collisions: {1: [(0, Outgoing), (2, Incoming), (3, Incoming), (4, Incoming), (5, Incoming), (8, Incoming), (9, Incoming), (11, Incoming), (12, Incoming), (13, Incoming), (15, Incoming), (16, Incoming), (17, Incoming)], 0: [(1, Incoming), (4, Incoming), (5, Incoming), (12, Incoming), (15, Incoming)], 2: [(1, Outgoing), (3, Incoming), (7, Incoming), (12, Incoming), (16, Incoming)], 3: [(1, Outgoing), (2, Outgoing), (8, Incoming), (9, Incoming), (10, Incoming), (11, Incoming), (12, Incoming), (16, Incoming), (17, Incoming)], 4: [(0, Outgoing), (1, Outgoing), (5, Incoming), (6, Incoming), (8, Incoming), (9, Incoming), (12, Incoming), (13, Incoming), (14, Incoming), (15, Incoming)], 5: [(0, Outgoing), (1, Outgoing), (4, Outgoing), (6, Incoming), (8, Incoming), (9, Incoming), (12, Incoming), (15, Incoming)], 6: [(5, Outgoing), (4, Outgoing), (15, Incoming)], 7: [(2, Outgoing), (17, Incoming)], 8: [(5, Outgoing), (4, Outgoing), (3, Outgoing), (1, Outgoing), (9, Incoming), (11, Incoming), (12, Incoming), (13, Incoming)], 9: [(5, Outgoing), (4, Outgoing), (3, Outgoing), (1, Outgoing), (8, Outgoing), (11, Incoming), (12, Incoming), (13, Incoming), (15, Incoming), (16, Incoming)], 10: [(3, Outgoing), (17, Incoming)], 11: [(8, Outgoing), (1, Outgoing), (3, Outgoing), (9, Outgoing), (12, Incoming), (13, Incoming), (16, Incoming)], 12: [(5, Outgoing), (4, Outgoing), (0, Outgoing), (8, Outgoing), (1, Outgoing), (3, Outgoing), (9, Outgoing), (11, Outgoing), (2, Outgoing)], 13: [(4, Outgoing), (8, Outgoing), (1, Outgoing), (11, Outgoing), (9, Outgoing), (16, Incoming)], 14: [(4, Outgoing)], 15: [(5, Outgoing), (4, Outgoing), (0, Outgoing), (6, Outgoing), (1, Outgoing), (9, Outgoing)], 16: [(3, Outgoing), (1, Outgoing), (11, Outgoing), (13, Outgoing), (2, Outgoing), (9, Outgoing), (17, Incoming)], 17: [(1, Outgoing), (3, Outgoing), (16, Outgoing), (7, Outgoing), (10, Outgoing)]} } } })
cc 8b5e070c0ec9f452819649074a700286542123bc4ffc69b5cdd810d0817feac5 # shrinks to test_params = TestParams { dim: 2, min_records: 2, max_records: 5, mbrs: [MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }, Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 50, max: 105 }, Bounds { min: 86, max: 142 }] }, MBR { bounds: [Bounds { min: 71, max: 78 }, Bounds { min: 438, max: 468 }] }, MBR { bounds: [Bounds { min: 60, max: 78 }, Bounds { min: 222, max: 505 }] }, MBR { bounds: [Bounds { min: 81, max: 85 }, Bounds { min: 74, max: 157 }] }, MBR { bounds: [Bounds { min: 94, max: 251 }, Bounds { min: 121, max: 228 }] }, MBR { bounds: [Bounds { min: 67, max: 90 }, Bounds { min: 458, max: 460 }] }, MBR { bounds: [Bounds { min: 256, max: 314 }, Bounds { min: 353, max: 396 }] }, MBR { bounds: [Bounds { min: 124, max: 199 }, Bounds { min: 236, max: 329 }] }, MBR { bounds: [Bounds { min: 298, max: 362 }, Bounds { min: 113, max: 132 }] }, MBR { bounds: [Bounds { min: 228, max: 288 }, Bounds { min: 235, max: 339 }] }, MBR { bounds: [Bounds { min: 62, max: 536 }, Bounds { min: 73, max: 390 }] }], additional_mbrs: [MBR { bounds: [Bounds { min: 181, max: 485 }, Bounds { min: 160, max: 255 }] }, MBR { bounds: [Bounds { min: 91, max: 209 }, Bounds { min: 203, max: 255 }] }, MBR { bounds: [Bounds { min: 457, max: 542 }, Bounds { min: 54, max: 55 }] }, MBR { bounds: [Bounds { min: 109, max: 392 }, Bounds { min: 53, max: 250 }] }, MBR { bounds: [Bounds { min: 108, max: 314 }, Bounds { min: 66, max: 127 }] }, MBR { bounds: [Bounds { min: 97, max: 276 }, Bounds { min: 100, max: 534 }] }, MBR { bounds: [Bounds { min: 63, max: 495 }, Bounds { min: 127, max: 396 }] }, MBR { bounds: [Bounds { min: 63, max: 258 }, Bounds { min: 394, max: 417 }] }], search_mbr: MBR { bounds: [Bounds { min: 105, max: 494 }, Bounds { min: 53, max: 98 }] } }
cc 9ac86af1510af6e1f331fbc4b1f0d4b2c8be90c8e22c2fa66885177d6fa0ec77 # shrinks to test_params = TestParams { dim: 1, min_records: 2, max_records: 9, mbrs: [MBR { bounds: [Bounds { min: 86, max: 435 }] }, MBR { bounds: [Bounds { min: 59, max: 134 }] }, MBR { bounds: [Bounds { min: 62, max: 74 }] }, MBR { bounds: [Bounds { min: 241, max: 253 }] }, MBR { bounds: [Bounds { min: 62, max: 67 }] }, MBR { bounds: [Bounds { min: 80, max: 220 }] }, MBR { bounds: [Bounds { min: 54, max: 154 }] }, MBR { bounds: [Bounds { min: 342, max: 520 }] }, MBR { bounds: [Bounds { min: 90, max: 130 }] }, MBR { bounds: [Bounds { min: 178, max: 443 }] }, MBR { bounds: [Bounds { min: 69, max: 354 }] }, MBR { bounds: [Bounds { min: 51, max: 55 }] }, MBR { bounds: [Bounds { min: 181, max: 326 }] }, MBR { bounds: [Bounds { min: 236, max: 265 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 107, max: 383 }] }, MBR { bounds: [Bounds { min: 65, max: 118 }] }, MBR { bounds: [Bounds { min: 57, max: 71 }] }, MBR { bounds: [Bounds { min: 267, max: 329 }] }, MBR { bounds: [Bounds { min: 433, max: 542 }] }, MBR { bounds: [Bounds { min: 149, max: 442 }] }, MBR { bounds: [Bounds { min: 389, max: 524 }] }, MBR { bounds: [Bounds { min: 85, max: 113 }] }, MBR { bounds: [Bounds { min: 64, max: 280 }] }, MBR { bounds: [Bounds { min: 259, max: 401 }] }, MBR { bounds: [Bounds { min: 85, max: 194 }] }, MBR { bounds: [Bounds { min: 326, max: 350 }] }, MBR { bounds: [Bounds { min: 148, max: 288 }] }, MBR { bounds: [Bounds { min: 149, max: 200 }] }, MBR { bounds: [Bounds { min: 218, max: 413 }] }, MBR { bounds: [Bounds { min: 199, max: 505 }] }, MBR { bounds: [Bounds { min: 285, max: 466 }] }, MBR { bounds: [Bounds { min: 120, max: 502 }] }, MBR { bounds: [Bounds { min: 205, max: 451 }] }, MBR { bounds: [Bounds { min: 192, max: 372 }] }, MBR { bounds: [Bounds { min: 160, max: 428 }] }, MBR { bounds: [Bounds { min: 132, max: 139 }] }, MBR { bounds: [Bounds { min: 263, max: 433 }] }, MBR { bounds: [Bounds { min: 140, max: 339 }] }, MBR { bounds: [Bounds { min: 173, max: 229 }] }, MBR { bounds: [Bounds { min: 345, max: 428 }] }, MBR { bounds: [Bounds { min: 88, max: 213 }] }, MBR { bounds: [Bounds { min: 93, max: 413 }] }, MBR { bounds: [Bounds { min: 285, max: 360 }] }, MBR { bounds: [Bounds { min: 399, max: 477 }] }, MBR { bounds: [Bounds { min: 117, max: 529 }] }, MBR { bounds: [Bounds { min: 70, max: 77 }] }, MBR { bounds: [Bounds { min: 166, max: 211 }] }, MBR { bounds: [Bounds { min: 411, max: 525 }] }, MBR { bounds: [Bounds { min: 73, max: 121 }] }, MBR { bounds: [Bounds { min: 89, max: 194 }] }, MBR { bounds: [Bounds { min: 66, max: 294 }] }, MBR { bounds: [Bounds { min: 445, max: 463 }] }, MBR { bounds: [Bounds { min: 51, max: 52 }] }, MBR { bounds: [Bounds { min: 80, max: 184 }] }, MBR { bounds: [Bounds { min: 163, max: 242 }] }, MBR { bounds: [Bounds { min: 155, max: 535 }] }, MBR { bounds: [Bounds { min: 97, max: 178 }] }, MBR { bounds: [Bounds { min: 139, max: 488 }] }, MBR { bounds: [Bounds { min: 223, max: 407 }] }, MBR { bounds: [Bounds { min: 50, max: 51 }] }, MBR { bounds: [Bounds { min: 325, max: 404 }] }, MBR { bounds: [Bounds { min: 60, max: 62 }] }, MBR { bounds: [Bounds { min: 157, max: 201 }] }, MBR { bounds: [Bounds { min: 127, max: 277 }] }], additional_mbrs: [MBR { bounds: [Bounds { min: 151, max: 156 }] }, MBR { bounds: [Bounds { min: 461, max: 478 }] }, MBR { bounds: [Bounds { min: 58, max: 127 }] }, MBR { bounds: [Bounds { min: 222, max: 490 }] }, MBR { bounds: [Bounds { min: 107, max: 529 }] }, MBR { bounds: [Bounds { min: 103, max: 317 }] }, MBR { bounds: [Bounds { min: 272, max: 510 }] }, MBR { bounds: [Bounds { min: 51, max: 169 }] }, MBR { bounds: [Bounds { min: 170, max: 338 }] }, MBR { bounds: [Bounds { min: 68, max: 227 }] }, MBR { bounds: [Bounds { min: 69, max: 74 }] }, MBR { bounds: [Bounds { min: 55, max: 82 }] }, MBR { bounds: [Bounds { min: 61, max: 151 }] }, MBR { bounds: [Bounds { min: 179, max: 356 }] }, MBR { bounds: [Bounds { min: 162, max: 281 }] }, MBR { bounds: [Bounds { min: 98, max: 189 }] }, MBR { bounds: [Bounds { min: 73, max: 310 }] }, MBR { bounds: [Bounds { min: 194, max: 272 }] }, MBR { bounds: [Bounds { min: 284, max: 452 }] }, MBR { bounds: [Bounds { min: 374, max: 474 }] }, MBR { bounds: [Bounds { min: 99, max: 104 }] }, MBR { bounds: [Bounds { min: 241, max: 418 }] }, MBR { bounds: [Bounds { min: 53, max: 474 }] }, MBR { bounds: [Bounds { min: 195, max: 311 }] }, MBR { bounds: [Bounds { min: 123, max: 189 }] }, MBR { bounds: [Bounds { min: 167, max: 238 }] }, MBR { bounds: [Bounds { min: 64, max: 94 }] }, MBR { bounds: [Bounds { min: 343, max: 392 }] }, MBR { bounds: [Bounds { min: 105, max: 209 }] }, MBR { bounds: [Bounds { min: 208, max: 330 }] }, MBR { bounds: [Bounds { min: 388, max: 392 }] }, MBR { bounds: [Bounds { min: 147, max: 191 }] }, MBR { bounds: [Bounds { min: 79, max: 98 }] }, MBR { bounds: [Bounds { min: 166, max: 432 }] }, MBR { bounds: [Bounds { min: 362, max: 437 }] }, MBR { bounds: [Bounds { min: 52, max: 134 }] }, MBR { bounds: [Bounds { min: 332, max: 464 }] }, MBR { bounds: [Bounds { min: 104, max: 106 }] }, MBR { bounds: [Bounds { min: 270, max: 398 }] }, MBR { bounds: [Bounds { min: 435, max: 473 }] }, MBR { bounds: [Bounds { min: 100, max: 397 }] }, MBR { bounds: [Bounds { min: 105, max: 194 }] }, MBR { bounds: [Bounds { min: 217, max: 506 }] }, MBR { bounds: [Bounds { min: 172, max: 338 }] }, MBR { bounds: [Bounds { min: 91, max: 270 }] }, MBR { bounds: [Bounds { min: 67, max: 70 }] }, MBR { bounds: [Bounds { min: 170, max: 370 }] }, MBR { bounds: [Bounds { min: 115, max: 118 }] }, MBR { bounds: [Bounds { min: 293, max: 460 }] }, MBR { bounds: [Bounds { min: 413, max: 475 }] }, MBR { bounds: [Bounds { min: 61, max: 67 }] }], search_mbr: MBR { bounds: [Bounds { min: 125, max: 178 }] }, mark_removed: {51, 41, 27, 19, 21}, alpha: 0.1 }
cc 7029ce9a03f44ab795234acb065411dbf703b583bae3464b6126a8b9976f81c2 # shrinks to test_params = TestParams { dim: 1, min_records: 2, max_records: 3, mbrs: [MBR { bounds: [Bounds { min: 57, max: 84 }] }, MBR { bounds: [Bounds { min: 70, max: 73 }] }, MBR { bounds: [Bounds { min: 94, max: 127 }] }, MBR { bounds: [Bounds { min: 63, max: 316 }] }, MBR { bounds: [Bounds { min: 130, max: 145 }] }, MBR { bounds: [Bounds { min: 274, max: 283 }] }, MBR { bounds: [Bounds { min: 246, max: 248 }] }, MBR { bounds: [Bounds { min: 102, max: 320 }] }, MBR { bounds: [Bounds { min: 57, max: 365 }] }, MBR { bounds: [Bounds { min: 412, max: 421 }] }, MBR { bounds: [Bounds { min: 123, max: 207 }] }, MBR { bounds: [Bounds { min: 53, max: 93 }] }, MBR { bounds: [Bounds { min: 60, max: 124 }] }, MBR { bounds: [Bounds { min: 343, max: 495 }] }, MBR { bounds: [Bounds { min: 469, max: 505 }] }, MBR { bounds: [Bounds { min: 344, max: 474 }] }, MBR { bounds: [Bounds { min: 148, max: 286 }] }, MBR { bounds: [Bounds { min: 61, max: 71 }] }, MBR { bounds: [Bounds { min: 84, max: 104 }] }, MBR { bounds: [Bounds { min: 214, max: 434 }] }, MBR { bounds: [Bounds { min: 318, max: 348 }] }, MBR { bounds: [Bounds { min: 52, max: 57 }] }, MBR { bounds: [Bounds { min: 242, max: 489 }] }, MBR { bounds: [Bounds { min: 295, max: 467 }] }, MBR { bounds: [Bounds { min: 156, max: 181 }] }, MBR { bounds: [Bounds { min: 112, max: 123 }] }, MBR { bounds: [Bounds { min: 144, max: 191 }] }, MBR { bounds: [Bounds { min: 121, max: 385 }] }, MBR { bounds: [Bounds { min: 59, max: 298 }] }, MBR { bounds: [Bounds { min: 463, max: 473 }] }, MBR { bounds: [Bounds { min: 180, max: 246 }] }, MBR { bounds: [Bounds { min: 154, max: 468 }] }, MBR { bounds: [Bounds { min: 117, max: 462 }] }, MBR { bounds: [Bounds { min: 159, max: 300 }] }, MBR { bounds: [Bounds { min: 146, max: 472 }] }, MBR { bounds: [Bounds { min: 182, max: 292 }] }, MBR { bounds: [Bounds { min: 323, max: 409 }] }, MBR { bounds: [Bounds { min: 99, max: 279 }] }, MBR { bounds: [Bounds { min: 185, max: 199 }] }, MBR { bounds: [Bounds { min: 84, max: 537 }] }, MBR { bounds: [Bounds { min: 90, max: 228 }] }, MBR { bounds: [Bounds { min: 54, max: 55 }] }, MBR { bounds: [Bounds { min: 59, max: 305 }] }, MBR { bounds: [Bounds { min: 199, max: 546 }] }, MBR { bounds: [Bounds { min: 226, max: 526 }] }, MBR { bounds: [Bounds { min: 129, max: 297 }] }, MBR { bounds: [Bounds { min: 80, max: 143 }] }, MBR { bounds: [Bounds { min: 369, max: 413 }] }, MBR { bounds: [Bounds { min: 363, max: 496 }] }, MBR { bounds: [Bounds { min: 332, max: 522 }] }, MBR { bounds: [Bounds { min: 383, max: 489 }] }, MBR { bounds: [Bounds { min: 73, max: 144 }] }, MBR { bounds: [Bounds { min: 241, max: 382 }] }, MBR { bounds: [Bounds { min: 67, max: 99 }] }, MBR { bounds: [Bounds { min: 99, max: 286 }] }, MBR { bounds: [Bounds { min: 195, max: 243 }] }, MBR { bounds: [Bounds { min: 227, max: 543 }] }, MBR { bounds: [Bounds { min: 367, max: 412 }] }, MBR { bounds: [Bounds { min: 69, max: 213 }] }, MBR { bounds: [Bounds { min: 306, max: 334 }] }, MBR { bounds: [Bounds { min: 158, max: 188 }] }, MBR { bounds: [Bounds { min: 147, max: 233 }] }, MBR { bounds: [Bounds { min: 299, max: 372 }] }, MBR { bounds: [Bounds { min: 104, max: 154 }] }, MBR { bounds: [Bounds { min: 159, max: 322 }] }, MBR { bounds: [Bounds { min: 55, max: 101 }] }, MBR { bounds: [Bounds { min: 285, max: 412 }] }, MBR { bounds: [Bounds { min: 86, max: 173 }] }, MBR { bounds: [Bounds { min: 314, max: 441 }] }, MBR { bounds: [Bounds { min: 169, max: 468 }] }, MBR { bounds: [Bounds { min: 143, max: 373 }] }, MBR { bounds: [Bounds { min: 191, max: 270 }] }, MBR { bounds: [Bounds { min: 66, max: 67 }] }, MBR { bounds: [Bounds { min: 485, max: 540 }] }, MBR { bounds: [Bounds { min: 180, max: 247 }] }, MBR { bounds: [Bounds { min: 178, max: 462 }] }, MBR { bounds: [Bounds { min: 200, max: 208 }] }, MBR { bounds: [Bounds { min: 124, max: 330 }] }, MBR { bounds: [Bounds { min: 276, max: 522 }] }, MBR { bounds: [Bounds { min: 54, max: 96 }] }, MBR { bounds: [Bounds { min: 74, max: 76 }] }, MBR { bounds: [Bounds { min: 60, max: 278 }] }], additional_mbrs: [MBR { bounds: [Bounds { min: 94, max: 255 }] }, MBR { bounds: [Bounds { min: 390, max: 442 }] }, MBR { bounds: [Bounds { min: 118, max: 133 }] }, MBR { bounds: [Bounds { min: 223, max: 316 }] }, MBR { bounds: [Bounds { min: 126, max: 174 }] }, MBR { bounds: [Bounds { min: 94, max: 146 }] }, MBR { bounds: [Bounds { min: 142, max: 185 }] }, MBR { bounds: [Bounds { min: 66, max: 251 }] }, MBR { bounds: [Bounds { min: 60, max: 295 }] }, MBR { bounds: [Bounds { min: 84, max: 205 }] }, MBR { bounds: [Bounds { min: 315, max: 525 }] }, MBR { bounds: [Bounds { min: 66, max: 71 }] }, MBR { bounds: [Bounds { min: 248, max: 515 }] }, MBR { bounds: [Bounds { min: 67, max: 74 }] }, MBR { bounds: [Bounds { min: 143, max: 397 }] }, MBR { bounds: [Bounds { min: 270, max: 309 }] }, MBR { bounds: [Bounds { min: 54, max: 56 }] }, MBR { bounds: [Bounds { min: 114, max: 475 }] }, MBR { bounds: [Bounds { min: 206, max: 370 }] }, MBR { bounds: [Bounds { min: 117, max: 175 }] }, MBR { bounds: [Bounds { min: 96, max: 183 }] }, MBR { bounds: [Bounds { min: 353, max: 388 }] }, MBR { bounds: [Bounds { min: 190, max: 349 }] }, MBR { bounds: [Bounds { min: 52, max: 211 }] }, MBR { bounds: [Bounds { min: 147, max: 289 }] }, MBR { bounds: [Bounds { min: 154, max: 454 }] }, MBR { bounds: [Bounds { min: 206, max: 319 }] }, MBR { bounds: [Bounds { min: 191, max: 497 }] }, MBR { bounds: [Bounds { min: 242, max: 280 }] }, MBR { bounds: [Bounds { min: 262, max: 301 }] }, MBR { bounds: [Bounds { min: 119, max: 152 }] }, MBR { bounds: [Bounds { min: 134, max: 200 }] }, MBR { bounds: [Bounds { min: 161, max: 381 }] }, MBR { bounds: [Bounds { min: 298, max: 368 }] }, MBR { bounds: [Bounds { min: 194, max: 513 }] }, MBR { bounds: [Bounds { min: 219, max: 262 }] }, MBR { bounds: [Bounds { min: 54, max: 57 }] }, MBR { bounds: [Bounds { min: 244, max: 412 }] }, MBR { bounds: [Bounds { min: 189, max: 512 }] }, MBR { bounds: [Bounds { min: 476, max: 515 }] }, MBR { bounds: [Bounds { min: 361, max: 378 }] }, MBR { bounds: [Bounds { min: 98, max: 255 }] }, MBR { bounds: [Bounds { min: 415, max: 490 }] }, MBR { bounds: [Bounds { min: 134, max: 233 }] }, MBR { bounds: [Bounds { min: 69, max: 73 }] }, MBR { bounds: [Bounds { min: 162, max: 393 }] }], search_mbr: MBR { bounds: [Bounds { min: 50, max: 51 }] }, mark_removed: {67, 9, 51, 10, 33, 8, 43, 48, 20, 58, 17, 32, 77, 12, 54, 4, 23, 76, 11, 74, 5, 37, 34, 18, 50, 21, 0, 47, 15, 70, 65, 69, 73, 39, 68, 55, 42, 80, 75, 22, 6, 1, 60}, alpha: 0.4 }
